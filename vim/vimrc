" Install Plugin manager
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    au VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins
call plug#begin('~/.vim/plugged')
Plug 'dense-analysis/ale'
Plug 'LunarWatcher/auto-pairs'
Plug 'cormacrelf/vim-colors-github'
Plug 'vimwiki/vimwiki'
Plug 'mzlogin/vim-markdown-toc'
Plug '~/git/pnevma.vim'
call plug#end()

"  Settings
filetype plugin on 
syntax on
set encoding=utf-8 
set foldenable
set foldopen=hor,insert,mark,search,undo
set textwidth=80 
set listchars=tab:▸\ ,space:·,eol:¬
set viminfofile=NONE
set ruler
set tabstop=4 
set shiftwidth=4 
set expandtab noai
set nocompatible 
set noshowmode 
set nowrap  
set nostartofline 
set ignorecase 
set noshowcmd  
set autoread
set copyindent
set preserveindent
set nomodeline
set modelines=0
set hlsearch 
set termguicolors 
set wildmenu
set clipboard=unnamedplus 
set shortmess=F
set backspace=indent,eol,start 
set foldmethod=marker
set noswapfile 
set undofile 
set undoreload=1000 
set undolevels=1000
set undodir=~/.vim/undo/ 
set backupdir=~/.vim/backup

" Visual
set fillchars+=eob:\ 
colorscheme pnevma
set bg=dark
let g:is_posix  = 1
hi EndOfBuffer guibg=bg
" Replicate :file as statusline
""set laststatus=2
"set statusline=
"set statusline+=\"
"set statusline+=%f
"set statusline+=\"
"set statusline+=\ 
"set statusline+=%L
"set statusline+=\ 
"set statusline+=lines
"set statusline+=\ 
"set statusline+=\--
"set statusline+=%p%%
"set statusline+=\--

" Netrw
let g:netrw_banner = 0  

" Enable normal colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

" Cursor
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Save
cmap w!! w !doas tee % >/dev/null

" Yank to xclip
function Xclip() range
  call system('xclip -selection c,p', @r)
  echo line("'>") - line("'<") + 1 "lines yanked to clipboard"
endfunction
vnoremap <C-y> "ry:call Xclip()  <cr>"

" ALE
set omnifunc=ale#completion#OmniFunc
let g:ale_completion_enabled = 1

" Create backup dir
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), 'p')
endif

" Create undo dir
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), 'p')
endif
